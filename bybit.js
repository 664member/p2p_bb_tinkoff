const path = require('path');
const fs = require('fs');
const puppeteer = require('puppeteer');
const readline = require('readline');
const FILTERS_FILE = path.join(__dirname, 'filters.json');


// ==== –§–ò–õ–¨–¢–†–´ ====
let filters = {
  blacklist: [],
  minPrice: 80,
  amount: 30000,
  keywords: ['–æ–¥–Ω–∏–º'],
  bannedWords: ['–±–µ—Ä—É %', '–±–µ—Ä—É –ø—Ä–æ—Ü–µ–Ω—Ç'],
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
if (fs.existsSync(FILTERS_FILE)) {
  try {
    const saved = JSON.parse(fs.readFileSync(FILTERS_FILE, 'utf-8'));
    filters = { ...filters, ...saved };
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.');
  } catch (err) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è filters.json. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.');
  }
}


// ==== Telegram ====
const TELEGRAM_BOT_TOKEN = '';
const TELEGRAM_CHAT_ID = ''; // –Ω–∞–ø—Ä–∏–º–µ—Ä, @your_channel –∏–ª–∏ id


(async () => {
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: [
      '--start-maximized',
      '--disable-blink-features=AutomationControlled',
    ],
  });

  const page = await browser.newPage();

  await page.evaluateOnNewDocument(() => {
    Object.defineProperty(navigator, 'webdriver', {
      get: () => false,
    });
  });

  await page.setUserAgent(
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'
  );

  await page.setRequestInterception(true);

  // –§–ª–∞–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º
  let interceptEnabled = false;

  page.on('request', (request) => {
    request.continue();
  });

  page.on('response', async (response) => {
    if (!interceptEnabled) return;

    const url = response.url();
    if (url.includes('https://www.bybit.com/x-api/fiat/otc/item/online')) {
      try {
        const json = await response.json();

        if (json.ret_code === 0 && Array.isArray(json.result.items)) {
          console.log('\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞:\n');
            json.result.items.forEach(async (user, index) => {
              const {
                nickName,
                price,
                lastQuantity,
                minAmount,
                maxAmount,
                remark
              } = user;

              console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${index + 1}`);
              console.log(`   üÜî –ù–∏–∫: ${nickName}`);
              console.log(`   üí∞ –¶–µ–Ω–∞: ${price}`);
              console.log(`   üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${lastQuantity}`);
              console.log(`   üîΩ –ú–∏–Ω. —Å—É–º–º–∞: ${minAmount}`);
              console.log(`   üîº –ú–∞–∫—Å. —Å—É–º–º–∞: ${maxAmount}`);
              console.log(`   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${remark || '‚Äî'}`);
              console.log('-------------------------');

              // ==== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ====
              const remarkText = (remark || '').toLowerCase();
              const hasKeyword = filters.keywords.length === 0 || filters.keywords.some(word => remarkText.includes(word));
              const hasBannedWord = filters.bannedWords.some(word => remarkText.includes(word));

              const inBlacklist = filters.blacklist.length > 0 && filters.blacklist.includes(nickName);
              const priceTooLow = filters.minPrice && Number(price) < filters.minPrice;
              const amountOutOfRange = filters.amount && (filters.amount < Number(minAmount) || filters.amount > Number(maxAmount));


              if (inBlacklist || priceTooLow || amountOutOfRange || !hasKeyword || hasBannedWord) {
                console.log('‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é.\n');
                return;
              }


              console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.\n');

              // ==== –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í TELEGRAM ====
              const message = `
            üîî –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü:

            üë§ –ù–∏–∫: ${nickName}
            üí∞ –¶–µ–Ω–∞: ${price}
            üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${lastQuantity}
            üîΩ –ú–∏–Ω. —Å—É–º–º–∞: ${minAmount}
            üîº –ú–∞–∫—Å. —Å—É–º–º–∞: ${maxAmount}
            üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${remark || '‚Äî'}
            `;

              try {
                await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'Markdown'
                  })
                });
                console.log('üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
              } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', err);
              }
            });


          // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
          nextStep();
        } else {
          console.log('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ ret_code != 0');
        }
      } catch (err) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err);
      }
    }
  });

  let currentPageIndex = 0;
  const paginationSelectors = [
    'li.pagination-item.pagination-item-1',
    'li.pagination-item.pagination-item-2',
    'li.pagination-item.pagination-item-3',
  ];

  async function goToPage(index) {
    const selector = `#root > div.trade-list > div.trade-list__main > div.trade-list__wrapper > div.trade-list__content > div > div > div.trade-table__pagination > ul > ${paginationSelectors[index]}`;
    try {
      await page.waitForSelector(selector, { timeout: 5000 });
      await page.click(selector);
      console.log(`‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${index + 1}`);
    } catch {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${index + 1}`);
    }
  }

  async function nextStep() {
    interceptEnabled = false;

    // –ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥
    console.log('‚è≥ –ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º...');
    await new Promise(resolve => setTimeout(resolve, 30000));

    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    currentPageIndex = (currentPageIndex + 1) % paginationSelectors.length;
    await goToPage(currentPageIndex);

    // –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–Ω–æ–≤–æ
    interceptEnabled = true;
  }

  try {
    await page.goto('https://www.bybit.com/ru-RU/p2p/sell/USDT/RUB', {
      waitUntil: 'domcontentloaded',
      timeout: 0,
    });

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É, –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è
    const modalButtonSelector =
      '#modal-root > div > div > div.by-dialog__foot.flex > button';

    try {
      const modalButton = await page.waitForSelector(modalButtonSelector, { timeout: 5000 });
      await modalButton.click();
      console.log('‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.');
    } catch {
      console.log('‚ÑπÔ∏è –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å.');
    }

    console.log('\nüö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é.');
    console.log('–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...');

    await new Promise((resolve) => {
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
      });
      rl.question('', () => {
        rl.close();
        resolve();
      });
    });
    function saveFilters() {
      fs.writeFileSync(FILTERS_FILE, JSON.stringify(filters, null, 2), 'utf-8');
      console.log('üíæ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    }

    function listenForCommands() {
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
      });

      rl.on('line', (input) => {
        const [cmd, ...args] = input.trim().split(' ');
        const argStr = args.join(' ');

        switch (cmd) {
          case '/setmin':
            filters.minPrice = parseFloat(argStr);
            console.log(`‚úÖ –ù–æ–≤—ã–π minPrice: ${filters.minPrice}`);
            saveFilters();
            break;

          case '/setamount':
            filters.amount = parseFloat(argStr);
            console.log(`‚úÖ –ù–æ–≤–∞—è —Å—É–º–º–∞: ${filters.amount}`);
            saveFilters();
            break;

          case '/addkw':
            filters.keywords.push(argStr.toLowerCase());
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${argStr}`);
            saveFilters();
            break;

          case '/rmkw':
            filters.keywords = filters.keywords.filter(w => w !== argStr.toLowerCase());
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${argStr}`);
            saveFilters();
            break;

          case '/addban':
            filters.bannedWords.push(argStr.toLowerCase());
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ: ${argStr}`);
            saveFilters();
            break;

          case '/rmban':
            filters.bannedWords = filters.bannedWords.filter(w => w !== argStr.toLowerCase());
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ: ${argStr}`);
            saveFilters();
            break;

          case '/addblack':
            filters.blacklist.push(argStr);
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${argStr}`);
            saveFilters();
            break;

          case '/rmblack':
            filters.blacklist = filters.blacklist.filter(nick => nick !== argStr);
            console.log(`‚úÖ –£–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: ${argStr}`);
            saveFilters();
            break;

          case '/show':
            console.log('üîé –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:', JSON.stringify(filters, null, 2));
            saveFilters();
            break;

          default:
            console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
      });
}


    console.log('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    listenForCommands();
    // –í–≤–æ–¥ —Å—É–º–º—ã
    const sumInputSelector = '#guide-step-two > div.moly-space.flex.items-center > div.moly-space-item.moly-space-item-first > div input';
    await page.waitForSelector(sumInputSelector);

    await page.focus(sumInputSelector);
    await page.evaluate((selector) => {
      const el = document.querySelector(selector);
      if (el) el.value = '';
    }, sumInputSelector);
    await page.type(sumInputSelector, '30000', { delay: 100 });
    console.log('‚úÖ –í–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ 30000.');

    // –ö–ª–∏–∫–∞–µ–º —è–∫–æ—Ä—å –º–µ–Ω—é
    await page.click('#paywayAnchorList');
    console.log('‚úÖ –û—Ç–∫—Ä—ã—Ç–æ —è–∫–æ—Ä–Ω–æ–µ –º–µ–Ω—é.');

    // –í—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç
    await page.waitForSelector('#lists > li:nth-child(2)');
    await page.click('#lists > li:nth-child(2)');
    console.log('‚úÖ –í—ã–±—Ä–∞–Ω –≤—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç.');

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
    const confirmBtnSelector = '#paywayList > div > section > button.moly-btn.inline-flex.items-center.justify-center.rounded-lg.select-none.text-base.transition-all.leading-6.font-IBM.font-semibold.enabled\\:active\\:border-base-bds-gray-t4-dis.enabled\\:active\\:text-base-bds-gray-t1-title.enabled\\:hover\\:border-base-bds-gray-t4-dis.enabled\\:hover\\:text-base-bds-gray-t2.px-\\[24px\\].py-\\[11px\\].btn-confirm';
    await page.waitForSelector(confirmBtnSelector);
    await page.click(confirmBtnSelector);
    console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤—ã–±–æ—Ä.');

    // –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    interceptEnabled = true;
    console.log('üöÄ –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–∫–ª—é—á—ë–Ω. –ñ–¥—ë–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç...');

    // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    setInterval(() => {}, 1000);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
  }
})();
